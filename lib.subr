
# See sysexits(3).
EX_OK=0
EX_USAGE=64
EX_DATAERR=65
EX_NOINPUT=66
EX_NOUSER=67
EX_NOHOST=68
EX_UNAVAILABLE=69
EX_SOFTWARE=70
EX_OSERR=71
EX_OSFILE=72
EX_CANTCREAT=73
EX_IOERR=74
EX_TEMPFAIL=75
EX_PROTOCOL=76
EX_NOPERM=77
EX_CONFIG=78

set -T

warn()
{
    echo "##!> $* <!##" >&2
}

err()
{
    echo "###> $* <###" >&2
}

info()
{
    echo "===> $* <===" >&2
}

debug()
{
    echo "======> $* <======" >&2
}

tobytes()
{
    local number="$1"

    if [ -z "${number}" ]; then
        err "usage: tobytes <number>"
        exit ${EX_USAGE}
    fi

    local b=1
    local kib=1024
    local mib=1048576
    local gib=1073741824
    local tib=1099511627776
    local pib=1125899906842624
    local eib=1152921504606846976

    local unit=1

    case "${number}" in
        *k|*K)
            unit="${kib}"
            ;;
        *m|*M)
            unit="${mib}"
            ;;
        *g|*G)
            unit="${gib}"
            ;;
        *t|*T)
            unit="${tib}"
            ;;
        *p|*P)
            unit="${pib}"
            ;;
        *e|*E)
            unit="${eib}"
            ;;
    esac

    number=`printf "%s" "${number}" | sed -Ee 's/^([0-9]+)[kKmMgGtTpPeE]$/\1/'`

    echo $((number*unit))

    return 0
}

random_number()
{
    if [ $# -lt 2 ]; then
        err "usage: random_number <begin> <end>"
        exit ${EX_USAGE}
    fi

    local begin
    begin="$1"

    local end
    end="$2"

    jot -r 1 "${begin}" "${end}"
}

kill_proc_tree()
{
    if [ $# -lt 1 ]; then
        err "usage: kill_proc_tree <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid="$1"

    local tokill
    for tokill in `get_proc_tree "${pid}" | tail -r`; do
        safest_kill "${tokill}"
    done

    safest_kill "${pid}"
}

safest_kill()
{   
    if [ $# -lt 1 ]; then
        err "usage: safest_kill <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid=$1

    local retry=1
    local total=3

    while [ ${retry} -le ${total} ]; do
        debug "Sending SIGTERM (${retry}/${total}) -> ${pid}"

        kill ${pid} > /dev/null 2>&1

        if ! check_proc ${pid}; then
            return 0
        fi

        sleep `random_number 1 3`.`random_number 3 9`

        retry=$((retry+1))
    done

    if check_proc ${pid}; then
        debug "Sending SIGKILL -> ${pid}"

        kill -KILL ${pid} > /dev/null 2>&1
    fi
}

get_proc_tree()
{
    if [ $# -lt 1 ]; then
        err "usage: get_proc_tree <ppid>"
        exit ${EX_USAGE}
    fi

    local ppid
    ppid=$1

    local pid
    for pid in `pgrep -P ${ppid}`; do
        echo ${pid}

        get_proc_tree ${pid}
    done
}

check_proc()
{
    if [ $# -lt 1 ]; then
        err "usage: check_proc <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid=$1

    if [ `ps -o pid -p ${pid} | wc -l` -eq 2 ]; then
        return 0
    else
        return 1
    fi
}
